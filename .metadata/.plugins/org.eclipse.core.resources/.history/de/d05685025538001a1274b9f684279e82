package com.fb.qa.pages;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Reporter;
import org.testng.asserts.SoftAssert;

import com.fb.qa.base.TestBase;

public class fbHomePage extends TestBase {
	public WebDriverWait wait = new WebDriverWait(driver, 50);
	Actions a = new Actions(driver);

	// Create instance of Javascript executor
	JavascriptExecutor je = (JavascriptExecutor) driver;

	// ****************************************************
	// PageFactory - Object Repository
	// ****************************************************
	
	// statusbox
	@FindBy(name = "xhpc_message")
	WebElement statusBox;

	@FindBy(xpath = "//button[contains(.,'Post')]")
	WebElement postButton;

	// Posted Message displayed
	@FindBy(xpath = "//p[contains(text(),'Hello World')]")
	WebElement postedMsg;
	
	//timestamp 	
	@FindBy(xpath = "//span[@id='js_d7']")
	WebElement timeStamp;
	
	//close message box   
	@FindBy(xpath = "//i[@class='img sp_rOrzOEa27lM sx_566131']")
	WebElement closeMsgBox;
	
	
	// Logout Navigation button
	@FindBy(id="userNavigationLabel")
	WebElement logoutNvg;

	// Logout
	@FindBy(xpath = "//span[@class='_54nh'][contains(.,'Log Out')]")
	WebElement logOut;

	// ******************************************************
	// Initializing the fbHomePage elements
	// ******************************************************
	public fbHomePage() {
		PageFactory.initElements(driver, this);
	}

	// ******************************************************
	// Actions or Methods
	// ******************************************************
	public String validate_fbHomePageTitle() {
		return driver.getTitle();
	}

	// post status
	public void postStatus(String statusMessage) throws Exception {
		wait.until(ExpectedConditions.visibilityOf(statusBox));
		statusBox.click();
		statusBox.sendKeys(statusMessage);
		postButton.click();
		Reporter.log("The status is posted correctly as "+statusMessage, true );
		Thread.sleep(2000);
		//checking if the status message popup is still existing and closing it
		if (closeMsgBox.isEnabled()&& closeMsgBox.isDisplayed()) {
		a.moveToElement(closeMsgBox).click().perform();
		Thread.sleep(6000);
		}
	}
	
	
	public void validatePostedMessage(String statusMessage) {
		SoftAssert softAssert= new SoftAssert();
		String Msg=postedMsg.getText();
		softAssert.assertEquals(statusMessage, Msg);			
		softAssert.assertAll();
	}
	
	
	public void userLogout() throws InterruptedException {
		SoftAssert softAssert= new SoftAssert();
		a.moveToElement(logoutNvg).perform();
		Thread.sleep(1000);
		je.executeScript("arguments[0].click();", logoutNvg);
		Thread.sleep(1000);
		a.moveToElement(logOut).click().build().perform();
		String logoutTitle= driver.getTitle();
		Thread.sleep(2000);
		softAssert.assertEquals(logoutTitle, "Facebook â€“ log in or sign up");
		
		Reporter.log("Clicking on the User Logout Navigation button from main menu and then Logout from the submenu", true);
		softAssert.assertAll();
	}

}
